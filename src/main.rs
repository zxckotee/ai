mod attention_gpu;
mod attention_logic;
mod knowledge_graph;
mod trusted_scraper;
mod segment;
mod text_processor;
mod embedding_cache;

use burn_tensor::{Tensor as BurnTensor, Distribution};
use burn_wgpu::{Wgpu, WgpuDevice};
use knowledge_graph::KnowledgeGraph;
use sled;
use tokio::runtime::Runtime;
use segment::Segment;
use text_processor::TextProcessor;
use embedding_cache::EmbeddingCache;

#[tokio::main]
async fn main() {
    println!("=== Metastasa - AI Knowledge System ===");
    
    // 1. Attention –Ω–∞ GPU (Burn)
    println!("\n=== Attention –Ω–∞ GPU (Burn) ===");
    let device = WgpuDevice::default();
    let query = BurnTensor::<Wgpu, 2>::random([1, 64], Distribution::Default, &device);
    let keys = BurnTensor::<Wgpu, 2>::random([10, 64], Distribution::Default, &device);
    let scores = attention_gpu::gpu_attention(&query, &keys);
    println!("GPU Attention scores: {:?}", scores);

    // 2. –õ–æ–≥–∏—á–µ—Å–∫–∏–π attention (Burn)
    println!("\n=== –õ–æ–≥–∏—á–µ—Å–∫–∏–π attention (Burn) ===");
    let query_logic = BurnTensor::<Wgpu, 2>::random([1, 8], Distribution::Default, &device);
    let keys_logic = BurnTensor::<Wgpu, 3>::random([1, 4, 8], Distribution::Default, &device);
    let logic_scores = attention_logic::logical_attention(&query_logic, &keys_logic);
    println!("Logic Attention scores: {:?}", logic_scores);

    // 3. –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π (petgraph + sled) —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏
    println!("\n=== –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π (petgraph + sled, –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã) ===");
    let db = sled::Config::new().temporary(true).open().expect("sled db");
    let mut kg = KnowledgeGraph::new(db);
    // –ü—Ä–∏–º–µ—Ä –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –ö–æ—Ç -> [–ì–æ–ª–æ–≤–∞ -> [–£—Å—ã, –ì–ª–∞–∑–∞], –õ–∞–ø—ã -> [–ö–æ–≥—Ç–∏]]
    let cat = Segment::Composite(vec![
        Segment::Composite(vec![
            Segment::Primitive("–£—Å—ã".into()),
            Segment::Primitive("–ì–ª–∞–∑–∞".into()),
        ]),
        Segment::Primitive("–õ–∞–ø—ã".into()),
    ]);
    let cat_idx = kg.add_node(cat);
    println!("KnowledgeGraph —Å–æ–∑–¥–∞–Ω: {} —É–∑–ª–æ–≤", kg.graph.node_count());
    println!("–û–±—Ö–æ–¥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤:");
    kg.traverse_segment(cat_idx);

    // 4. TrustedScraper (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    println!("\n=== TrustedScraper (async) ===");
    let scraper = trusted_scraper::TrustedScraper::new();
    let result = scraper.check("–ö–æ—Ç—ã –∏–º–µ—é—Ç 4 –Ω–æ–≥–∏").await;
    println!("TrustedScraper —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {}", result);
    
    // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
    println!("\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (TextProcessor) ===");
    let mut processor = TextProcessor::new();
    let text = "–ö–æ—Ç –µ—Å—Ç —Ä—ã–±—É. –†—ã–±–∞ –≤–æ–¥–∏—Ç—Å—è –≤ –º–æ—Ä–µ.";
    let result = processor.process_text(text).await;
    println!("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {}", result.entities.len());
    println!("–ù–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {}", result.actions.len());
    println!("–ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: {}", result.properties.len());
    println!("–°–æ–∑–¥–∞–Ω–æ —É–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞: {}", result.graph_nodes.len());
    println!("–°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {}", result.graph_edges.len());
    
    // 6. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
    println!("\n=== –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ===");
    let embedding1 = EmbeddingCache::get_cached_embedding("–∫–æ—Ç");
    let embedding2 = EmbeddingCache::get_cached_embedding("–∫–æ—à–∫–∞");
    let similarity = EmbeddingCache::cosine_similarity(&embedding1, &embedding2);
    println!("–°—Ö–æ–¥—Å—Ç–≤–æ '–∫–æ—Ç' –∏ '–∫–æ—à–∫–∞': {:.3}", similarity);
    
    let cache_stats = EmbeddingCache::get_cache_stats();
    println!("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:");
    println!("  –í—Å–µ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {}", cache_stats.total_embeddings);
    println!("  –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π: {}", cache_stats.entity_embeddings);
    println!("  –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π: {}", cache_stats.action_embeddings);
    println!("  –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å–≤–æ–π—Å—Ç–≤: {}", cache_stats.property_embeddings);
    
    // 7. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    println!("\n=== –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===");
    let learned = processor.learn_from_text("–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä ‚Äî —ç—Ç–æ –ª–µ—Ç–∞—Ç–µ–ª—å–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç —Å 4 –º–æ—Ç–æ—Ä–∞–º–∏", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ: –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã").await;
    println!("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è: {}", if learned { "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä–∞—Ñ" } else { "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é" });
    
    // 8. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    println!("\n=== –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ===");
    let query_embedding = EmbeddingCache::get_cached_embedding("–∂–∏–≤–æ—Ç–Ω–æ–µ");
    let sample_embeddings = vec![
        EmbeddingCache::get_cached_embedding("–∫–æ—Ç"),
        EmbeddingCache::get_cached_embedding("—Å–æ–±–∞–∫–∞"),
        EmbeddingCache::get_cached_embedding("—Ä—ã–±–∞"),
        EmbeddingCache::get_cached_embedding("–¥–µ—Ä–µ–≤–æ"),
    ];
    let similar = EmbeddingCache::find_similar_embeddings(&query_embedding, &sample_embeddings, 3);
    println!("–ù–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ '–∂–∏–≤–æ—Ç–Ω–æ–µ':");
    for (idx, similarity) in similar {
        let text = match idx {
            0 => "–∫–æ—Ç",
            1 => "—Å–æ–±–∞–∫–∞",
            2 => "—Ä—ã–±–∞",
            3 => "–¥–µ—Ä–µ–≤–æ",
            _ => "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
        println!("  {}: {:.3}", text, similarity);
    }
    
    println!("\n=== –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç! ===");
    println!("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
    println!("üìö –î–ª—è –∑–∞–ø—É—Å–∫–∞ REST API –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cargo run --bin api");
}
